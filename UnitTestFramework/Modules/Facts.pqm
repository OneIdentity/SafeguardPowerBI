let
    Facts.Fact = (_subject as text, _expected, _actual) as record =>
        [
            expected = try _expected,
            safeExpected = if expected[HasError] then "Expected : " & ValueToText(expected[Error]) else expected[
                Value
            ],
            actual = try _actual,
            safeActual = if actual[HasError] then "Actual : " & ValueToText(actual[Error]) else actual[Value],
            attempt = try safeExpected = safeActual,
            result = if attempt[HasError] or not attempt[Value] then "Failure ⛔" else "Success ✓",
            resultOp = if result = "Success ✓" then " = " else " <> ",
            addendumEvalAttempt = if attempt[HasError] then ValueToText(attempt[Error]) else "",
            addendumEvalExpected = try ValueToText(safeExpected) otherwise "...",
            addendumEvalActual = try ValueToText(safeActual) otherwise "...",
            fact = [
                Result = result & " " & addendumEvalAttempt,
                Notes = _subject,
                Details = " (" & addendumEvalExpected & resultOp & addendumEvalActual & ")"
            ]
        ][fact],
    Summarize = (_facts as list) as table =>
        [
            shortOutput = Text.Lower(Environment.FeatureSwitch("output", "short")) = "short",
            simplifiedFactsList = _simplifyFactsList(_facts),
            Fact.CountSuccesses = (count, i) =>
                [
                    result = try i[Result],
                    sum = if result[HasError] or not Text.StartsWith(result[Value], "Success") then count else count + 1
                ][sum],
            passed = List.Accumulate(simplifiedFactsList, 0, Fact.CountSuccesses),
            total = List.Count(simplifiedFactsList),
            format = if passed = total then "All #{0} Passed !!! ✓" else "#{0} Passed ☺  #{1} Failed ☹",
            outputFactList = if shortOutput then
                List.Select(simplifiedFactsList, each not Text.StartsWith([Result], "Success"))
            else
                simplifiedFactsList,
            result = if passed = total then "Success" else "⛔",
            rate = Number.IntegerDivide(100 * passed, total),
            header = [
                Result = result,
                Notes = Text.Format(format, {passed, total - passed}),
                Details = Text.Format("#{0}% success rate", {rate})
            ],
            report = Table.FromRecords(List.Combine({{header}, outputFactList})),
            _simplifyFactsList = (facts as list) as list =>
                let
                    simplifiedList = List.Accumulate(
                        facts,
                        {},
                        (state, current) =>
                            if Value.Is(current, type list) = true then
                                List.Combine({state, @_simplifyFactsList(current)})
                            else
                                List.Combine({state, {current}})
                    )
                in
                    simplifiedList
        ][report]
in
    [
        Fact = Facts.Fact,
        Summarize = Summarize
    ]
