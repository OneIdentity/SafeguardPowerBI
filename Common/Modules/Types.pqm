let
    Types.Constants = Extension.ImportModule("Constants.pqm")[SppConstants],
    SafeguardPasswords.ContentsType = type function (
        applianceName as (
            type text meta [
                Documentation.FieldCaption = "Source FQDN or IP",
                Documentation.FieldDescription = "The source IP address identifies the appliance from which you will fetch data.",
                Documentation.SampleValues = {"10.12.230.21"}
            ]
        ),
        optional resourcePath as (
            type text meta [
                Documentation.FieldCaption = "Custom Resource Path",
                Documentation.FieldDescription = "The path to the API resource you wish to query.",
                Documentation.SampleValues = {Types.Constants[Endpoints][Assets]}
            ]
        ),
        optional filter as (
            type text meta [
                Documentation.FieldCaption = "Query Filter",
                Documentation.FieldDescription = "The SPP API Query Filter. See SPP API documetation for all options.",
                Documentation.SampleValues = {"AssetName eq 'MyAsset'"}
            ]
        ),
        optional fields as (
            type text meta [
                Documentation.FieldCaption = "Response Fields",
                Documentation.FieldDescription = "Fields to be returned from the SPP API Query. See SPP API documetation for all options.",
                Documentation.SampleValues = {"Id,Name,Description"}
            ]
        ),
        optional queryOptions as (
            type text meta [
                Documentation.FieldCaption = "Additional Query Options",
                Documentation.FieldDescription = "Additional API Query options to be included in the SPP API Query. See SPP API documetation for all options.",
                Documentation.SampleValues = {"limit=10&includeDetails=true"}
            ]
        ),
        optional ResponseFormat as (
            type text meta [
                Documentation.FieldCaption = "API Response Format",
                Documentation.FieldDescription = "Format of Response. Default CSV. See SPP API documetation for all options.",
                Documentation.AllowedValues = {"CSV", "JSON"}
            ]
        )
    ) as record meta [
        Documentation.Name = Types.Constants[DataConnectorName],
        Documentation.LongDescription = "Enter the required parameters to fetch data from Safeguard for Privileged Passwords (SPP). If no optional input fields are specified you can use the built in SPP API queries.
        Use the optional input fields (Custom Resource Path, Query Filter, Response Fields, Additional Query Options) to query different SPP API endpoints and / or different data.
        See SPP API documetation for all options."
    ],
    CustomErrors.ErrorBaseType = type function (
        reason as (
            type text meta [
                Documentation.FieldCaption = "Error reason",
                Documentation.FieldDescription = "Reason for the error"
            ]
        ),
        message as (
            type text meta [
                Documentation.FieldCaption = "Error message",
                Documentation.FieldDescription = "Descriptive message of the error"
            ]
        ),
        detail as [
            Cause = (
                type any meta [
                    Documentation.FieldCaption = "Cause of the error",
                    Documentation.FieldDescription = "The data that triggered the error"
                ]
            ),
            RequestUrl = (type nullable text meta [
                Documentation.FieldCaption = "Request url"
            ])
        ],
        optional manuallyHandled as (
            type logical meta [
                Documentation.FieldCaption = "Handled error",
                Documentation.FieldDescription = "Whether the error is handled manually in the code or it should propagate up to the user"
            ]
        )
    ) as table meta [
        Documentation.Name = "ErrorBase"
    ]
in
    [
        ContentsType = SafeguardPasswords.ContentsType,
        ErrorBaseType = CustomErrors.ErrorBaseType
    ]
