let
    GetOption = SafeguardSessions.ImportFunction("GetOption", "CommonUtils.pqm"),
    SetOption = SafeguardSessions.ImportFunction("SetOption", "CommonUtils.pqm"),
    InfoEndpoint = SafeguardSessions.ImportFunction("InfoEndpoint", "Constants.pqm"),
    Request.Generate = SafeguardSessions.ImportFunction("Generate", "Request.pqm"),
    Request.GetDefaultParameters = SafeguardSessions.ImportFunction("GetDefaultParameters", "Request.pqm"),
    ResponseHandler.GetDataFromResponse = SafeguardSessions.ImportFunction(
        "GetDataFromResponse", "CommonResponseHandler.pqm"
    ),
    ResponseHandler.ValidateByStatusCode = SafeguardSessions.ImportFunction(
        "ValidateByStatusCode", "ResponseHandler.pqm"
    ),
    UrlBuilder.GenerateUrl = SafeguardSessions.ImportFunction("GenerateUrl", "UrlBuilder.pqm"),
    Version.Separator = ".",
    Version.GetVersion = (spsUrl as text, sessionId as text, optional options as nullable record) as text =>
        let
            infoUrl = UrlBuilder.GenerateUrl(spsUrl, InfoEndpoint),
            mockedInfoResponse = GetOption(options, "Mocks.InfoResponse"),
            infoResponse = ResponseHandler.ValidateByStatusCode(
                Request.Generate(
                    infoUrl,
                    Request.GetDefaultParameters(sessionId),
                    SetOption([], "Mocks.Response", GetOption(options, "Mocks.InfoResponse"))
                )
            ),
            version = ResponseHandler.GetDataFromResponse(infoResponse, "body.firmware_version")
        in
            version,
    Version.CheckVersion = (version as text, supportedVersions as list) as logical =>
        let
            IsVersionAccepted = (version, supportedVersion) =>
                let
                    versionParts = Text.Split(version, Version.Separator),
                    supportedVersionParts = Text.Split(supportedVersion, Version.Separator),
                    commonLength = List.Min({List.Count(versionParts), List.Count(supportedVersionParts)})
                in
                    List.FirstN(versionParts, commonLength) = List.FirstN(supportedVersionParts, commonLength),
            versionAccepted = List.Contains(
                supportedVersions, version, (supportedVersion) => IsVersionAccepted(version, supportedVersion)
            )
        in
            versionAccepted
in
    [
        GetVersion = Version.GetVersion,
        CheckVersion = Version.CheckVersion
    ]
