let
    GetOption = SafeguardSessions.ImportFunction("GetOption", "CommonUtils.pqm"),
    SetOption = SafeguardSessions.ImportFunction("SetOption", "CommonUtils.pqm"),
    SessionsEndpoint = SafeguardSessions.ImportFunction("SessionsEndpoint", "Constants.pqm"),
    Request.Generate = SafeguardSessions.ImportFunction("Generate", "Request.pqm"),
    Request.GetDefaultParameters = SafeguardSessions.ImportFunction("GetDefaultParameters", "Request.pqm"),
    ResponseHandler.ValidateByStatusCode = SafeguardSessions.ImportFunction(
        "ValidateByStatusCode", "ResponseHandler.pqm"
    ),
    UrlBuilder.GenerateUrl = SafeguardSessions.ImportFunction("GenerateUrl", "UrlBuilder.pqm"),
    Schema.GetSchema = SafeguardSessions.ImportFunction("GetSchema", "Schema.pqm"),
    SchemaUtils.ApplySchema = SafeguardSessions.ImportFunction("ApplySchema", "SchemaUtils.pqm"),
    AdvancedSearch.AdvancedSearch = (
        spsUrl as text, queryParams as record, snapshot as text, sessionId as text, optional options as nullable record
    ) as table =>
        let
            fetchUrl = UrlBuilder.GenerateUrl(spsUrl, SessionsEndpoint, queryParams & [snapshot = snapshot]),
            result = AdvancedSearch.GetAllPagesByNextLink(spsUrl, fetchUrl, sessionId, options),
            resultWithMetadata = Value.ReplaceMetadata(result, [RequestUrl = fetchUrl])
        in
            resultWithMetadata,
    AdvancedSearch.GetAllPagesByNextLink = (
        spsUrl as text, start_url as text, sessionId as text, optional options as nullable record
    ) as table =>
        AdvancedSearch.GenerateByPage(
            (previous) =>
                let
                    nextUrl = if (previous = null) then start_url else AdvancedSearch.GetNextUrl(spsUrl, previous),
                    page = if (nextUrl <> null) then AdvancedSearch.GetPage(nextUrl, sessionId, options) else null
                in
                    page
        ),
    AdvancedSearch.GetNextUrl = (spsUrl as text, response as table) as nullable text =>
        let
            nextLink = Value.Metadata(response)[NextLink],
            nextUrl = if nextLink <> null then UrlBuilder.GenerateUrl(spsUrl, nextLink) else null
        in
            nextUrl,
    AdvancedSearch.GetPage = (url as text, sessionId as text, optional options as nullable record) as table =>
        let
            mockedGetPageResponseMap = GetOption(options, "Mocks.GetPageResponseMap"),
            response = ResponseHandler.ValidateByStatusCode(
                Request.Generate(
                    url,
                    Request.GetDefaultParameters(sessionId),
                    SetOption(
                        [],
                        "Mocks.Response",
                        Record.FieldOrDefault(GetOption(options, "Mocks.GetPageResponseMap") ?? [], url)
                    )
                )
            ),
            nextLink = response[meta][next]?,
            mockedSessionsSchema = GetOption(options, "Mocks.Schema.Sessions"),
            page = SchemaUtils.ApplySchema(
                response, GetOption(options, "Mocks.Schema.Sessions") ?? Schema.GetSchema("Sessions"), options
            ) meta [NextLink = nextLink]
        in
            page,
    AdvancedSearch.GenerateByPage = (getNextPage as function) as table =>
        let
            listOfPages = List.Generate(
                () => getNextPage(null), (lastPage) => lastPage <> null, (lastPage) => getNextPage(lastPage)
            ),
            tableOfPages = Table.FromList(listOfPages, Splitter.SplitByNothing(), {"Page"}),
            firstRow = tableOfPages{0},
            combined = Value.ReplaceType(
                Table.ExpandTableColumn(tableOfPages, "Page", Table.ColumnNames(firstRow[Page])),
                Value.Type(firstRow[Page])
            )
        in
            Table.SelectRows(
                combined, each not List.IsEmpty(List.RemoveMatchingItems(Record.FieldValues(_), {null}))
            )
in
    [
        AdvancedSearch = AdvancedSearch.AdvancedSearch
    ]
