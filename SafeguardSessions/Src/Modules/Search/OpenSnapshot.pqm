let
    GetOption = SafeguardSessions.ImportFunction("GetOption", "CommonUtils.pqm"),
    SetOption = SafeguardSessions.ImportFunction("SetOption", "CommonUtils.pqm"),
    SessionsSnapshotEndpoint = SafeguardSessions.ImportFunction("SessionsSnapshotEndpoint", "Constants.pqm"),
    Request.Generate = SafeguardSessions.ImportFunction("Generate", "Request.pqm"),
    Request.GetDefaultParameters = SafeguardSessions.ImportFunction("GetDefaultParameters", "Request.pqm"),
    ResponseHandler.GetDataFromResponse = SafeguardSessions.ImportFunction(
        "GetDataFromResponse", "CommonResponseHandler.pqm"
    ),
    ResponseHandler.ValidateByStatusCode = SafeguardSessions.ImportFunction(
        "ValidateByStatusCode", "ResponseHandler.pqm"
    ),
    UrlBuilder.GenerateUrl = SafeguardSessions.ImportFunction("GenerateUrl", "UrlBuilder.pqm"),
    OpenSnapshot.OpenSnapshot = (spsUrl as text, sessionId as text, optional options as nullable record) as text =>
        let
            openSnapshotUrl = UrlBuilder.GenerateUrl(spsUrl, SessionsSnapshotEndpoint),
            openSnapshotResponse = ResponseHandler.ValidateByStatusCode(
                Request.Generate(
                    openSnapshotUrl,
                    Request.GetDefaultParameters(sessionId),
                    SetOption([], "Mocks.Response", GetOption(options, "Mocks.OpenSnapshotResponse"))
                )
            ),
            snapshot = ResponseHandler.GetDataFromResponse(openSnapshotResponse, "body.snapshot")
        in
            snapshot
in
    [
        OpenSnapshot = OpenSnapshot.OpenSnapshot
    ]
