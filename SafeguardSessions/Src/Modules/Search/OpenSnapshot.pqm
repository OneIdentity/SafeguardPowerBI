let
    IsMocked = SafeguardSessions.ImportFunction("IsMocked", "CommonUtils.pqm"),
    SessionsSnapshotEndpoint = SafeguardSessions.ImportFunction("SessionsSnapshotEndpoint", "Constants.pqm"),
    Request.Generate = SafeguardSessions.ImportFunction("Generate", "Request.pqm"),
    Request.GetDefaultParameters = SafeguardSessions.ImportFunction("GetDefaultParameters", "Request.pqm"),
    ResponseHandler.GetDataFromResponse = SafeguardSessions.ImportFunction(
        "GetDataFromResponse", "CommonResponseHandler.pqm"
    ),
    ResponseHandler.ValidateByStatusCode = SafeguardSessions.ImportFunction("ValidateByStatusCode", "ResponseHandler.pqm"),
    UrlBuilder.GenerateUrl = SafeguardSessions.ImportFunction("GenerateUrl", "UrlBuilder.pqm"),
    OpenSnapshot.OpenSnapshot = (spsUrl as text, sessionId as text, apiKey as nullable text, optional mocks as nullable record) as text =>
        let
            openSnapshotUrl = UrlBuilder.GenerateUrl(spsUrl, SessionsSnapshotEndpoint),
            openSnapshotResponse = ResponseHandler.ValidateByStatusCode(
                if IsMocked(mocks, "OpenSnapshotResponse") then
                    Request.Generate(
                        openSnapshotUrl,
                        Request.GetDefaultParameters(sessionId),
                        [
                            Response = mocks[OpenSnapshotResponse]
                        ]
                    )
                else
                    Request.Generate(openSnapshotUrl, Request.GetDefaultParameters(sessionId, apiKey))
            ),
            snapshot = ResponseHandler.GetDataFromResponse(openSnapshotResponse, "body.snapshot")
        in
            snapshot
in
    [
        OpenSnapshot = OpenSnapshot.OpenSnapshot
    ]
