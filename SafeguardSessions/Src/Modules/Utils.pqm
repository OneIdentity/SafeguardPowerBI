let
    SuccessStatus = SafeguardSessions.ImportFunction("SuccessStatus", "Constants.pqm"),
    ErrorStatus = SafeguardSessions.ImportFunction("ErrorStatus", "Constants.pqm"),
    NotAvailableStatus = SafeguardSessions.ImportFunction("NotAvailableStatus", "Constants.pqm"),
    ErrorLog = SafeguardSessions.ImportFunction("ErrorLog", "CommonLogger.pqm"),
    Utils.FetchInfo = (
        status as text,
        message as text,
        start as nullable datetimezone,
        expectedCount as number,
        failed as logical,
        url as text
    ) as table =>
        Table.FromRecords(
            {
                [
                    Start = start,
                    Url = url,
                    ConnectorVersion = Extension.LoadString("ReleaseVersion"),
                    Status = status,
                    ExpectedCount = expectedCount,
                    Message = message,
                    Failed = failed
                ]
            }
        ),
    Utils.SPSResult = (session_data as anynonnull, additional_info as table) as table =>
        let
            source = #table(
                {"Name", "Data", "ItemKind", "ItemName", "IsLeaf"},
                {
                    {"Sessions", session_data, "Table", "Table", true},
                    {"Info", additional_info, "Table", "Table", true}
                }
            ),
            tableType = Value.Type(source),
            newTableType = Type.AddTableKey(tableType, {"Name"}, true) meta [
                NavigationTable.NameColumn = "Name",
                NavigationTable.DataColumn = "Data",
                NavigationTable.ItemKindColumn = "ItemKind",
                Preview.DelayColumn = "ItemName",
                NavigationTable.IsLeafColumn = "IsLeaf"
            ],
            navigationTable = Value.ReplaceType(source, newTableType)
        in
            navigationTable,
    Utils.BuildSPSResult = (response as record, start_time as datetimezone) =>
        let
            spsresult =
                if response[HasError] then
                    ErrorLog(
                        "Error response of the http request",
                        Utils.SPSResult(
                            response[Error],
                            Utils.FetchInfo(
                                ErrorStatus,
                                response[Error][Message],
                                start_time,
                                0,
                                true,
                                response[Error][Detail][RequestUrl]? ?? NotAvailableStatus
                            )
                        )
                    )
                else
                    [
                        sessions = response[Value],
                        sessionsMeta = Value.Metadata(sessions),
                        result = Utils.SPSResult(
                            sessions,
                            Utils.FetchInfo(
                                SuccessStatus,
                                "Data fetch succeeded.",
                                start_time,
                                sessionsMeta[Count],
                                false,
                                sessionsMeta[RequestUrl]
                            )
                        )
                    ][result]
        in
            spsresult
in
    [
        FetchInfo = Utils.FetchInfo,
        SPSResult = Utils.SPSResult,
        BuildSPSResult = Utils.BuildSPSResult
    ]
