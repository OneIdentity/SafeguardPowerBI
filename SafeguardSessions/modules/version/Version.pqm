let
    IsMocked = Extension.ImportFunction("IsMocked", "Utils.pqm"),
    InfoEndpoint = Extension.ImportFunction("InfoEndpoint", "Constants.pqm"),
    Logger.InfoLog = Extension.ImportFunction("InfoLog", "Logger.pqm"),
    Request.Generate = Extension.ImportFunction("Generate", "Request.pqm"),
    Request.GetDefaultParameters = Extension.ImportFunction("GetDefaultParameters", "Request.pqm"),
    ResponseHandler.GetDataFromResponse = Extension.ImportFunction("GetDataFromResponse", "ResponseHandler.pqm"),
    ResponseHandler.ValidateByStatusCode = Extension.ImportFunction("ValidateByStatusCode", "ResponseHandler.pqm"),
    UrlBuilder.GenerateUrl = Extension.ImportFunction("GenerateUrl", "UrlBuilder.pqm"),
    Version.GetVersion = (spsUrl as text, sessionId as text, optional mocks as nullable record) as text =>
        let
            infoUrl = UrlBuilder.GenerateUrl(spsUrl, InfoEndpoint),
            infoResponse = ResponseHandler.ValidateByStatusCode(
                Request.Generate(
                    infoUrl,
                    Request.GetDefaultParameters(sessionId),
                    if IsMocked(mocks, "InfoResponse") then
                        [Response = mocks[InfoResponse]]
                    else
                        []
                )
            ),
            version = ResponseHandler.GetDataFromResponse(infoResponse, "body.firmware_version")
        in
            version,
    Version.CheckVersion = (version as text, supportedVersions as list) as logical =>
        let
            IsVersionAccepted = (version, supportedVersion) =>
                Text.StartsWith(version, supportedVersion, Comparer.OrdinalIgnoreCase),
            versionAccepted = List.Contains(
                supportedVersions, version, (supportedVersion) => IsVersionAccepted(version, supportedVersion)
            )
        in
            versionAccepted
in
    [
        GetVersion = Version.GetVersion,
        CheckVersion = Version.CheckVersion
    ]
