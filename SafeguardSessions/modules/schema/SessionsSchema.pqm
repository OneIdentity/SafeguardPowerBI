let
    // Imports
    CreateSchema = Extension.ImportFunction("CreateSchema", "SchemaUtils.pqm"),
    //
    // Constants
    Sessions.Name = "sessions",
    Sessions.IdentifierColumn = "session_id",
    Sessions.SubTables = {"user", "client"},
    //
    // Schema definiton
    Sessions.User = CreateSchema(
        {
            {"sessions.user_id", Number.Type},
            {"user.gateway_username", Text.Type},
            {"user.gateway_username_domain", Text.Type},
            {"user.id", Text.Type},
            {"user.name", Text.Type},
            {"user.name_domain", Text.Type},
            {"user.server_username", Text.Type},
            {"user.server_username_domain", Text.Type}
        }
    ),
    Sessions.UserToSessions = CreateSchema(
        {{Sessions.IdentifierColumn, Text.Type}, {"sessions.user_id", Number.Type}}
    ),
    Sessions.Client = CreateSchema(
        {
            {"sessions.client_id", Number.Type},
            {"client.ip", Text.Type},
            {"client.name", Text.Type},
            {"client.port", Number.Type}
        }
    ),
    Sessions.ClientToSessions = CreateSchema(
        {{Sessions.IdentifierColumn, Text.Type}, {"sessions.client_id", Number.Type}}
    ),
    Sessions = CreateSchema(
        {
            {Sessions.IdentifierColumn, Text.Type},
            {"active", Logical.Type},
            {"analytics.interesting_events", Text.Type},
            {"analytics.score.aggregated", Number.Type},
            {"analytics.score.details.command.score", Number.Type},
            {"analytics.score.details.fis.score", Number.Type},
            {"analytics.score.details.hostlogin.score", Number.Type},
            {"analytics.score.details.logintime.score", Number.Type},
            {"analytics.score.details.keystroke.score", Number.Type},
            {"analytics.score.details.mouse.score", Number.Type},
            {"analytics.score.details.windowtitle.score", Number.Type},
            {"analytics.scripted", Logical.Type},
            {"analytics.similar_sessions", Text.Type},
            {"analytics.bucketed_duration", Text.Type},
            {"analytics.bucketed_duration_starting_hour", Text.Type},
            {"analytics.tags", Text.Type},
            {"creation_time", DateTimeZone.Type},
            {"duration", Number.Type},
            {"end_time", DateTimeZone.Type},
            {"log.adapter_name", Text.Type},
            {"log.auth_method", Text.Type},
            {"log.syslog_time", DateTimeZone.Type},
            {"node_id", Text.Type},
            {"origin", Text.Type},
            {"protocol", Text.Type},
            {"vault.appliance_id", Text.Type},
            {"vault.appliance_name", Text.Type},
            {"vault.access_request_type", Text.Type},
            {"vault.asset_partition_id", Number.Type},
            {"vault.asset_partition_name", Text.Type},
            {"vault.broker_id", Number.Type},
            {"vault.broker_name", Text.Type},
            {"vault.account_id", Number.Type},
            {"vault.account_name", Text.Type},
            {"vault.system_id", Number.Type},
            {"vault.system_name", Text.Type},
            {"vault.ticket_number", Text.Type},
            {"vault.reason_name", Text.Type},
            {"vault.is_emergency", Logical.Type},
            {"vault.offline_workflow", Logical.Type},
            {"vault.auto_approved", DateTimeZone.Type},
            {"vault.emergency_access_granted", DateTimeZone.Type},
            {"vault.available", DateTimeZone.Type},
            {"vault.checked_in", DateTimeZone.Type},
            {"vault.expired", DateTimeZone.Type},
            {"vault.created.user.user_id", Number.Type},
            {"vault.created.user.user_name", Text.Type},
            {"vault.created.user.domain_name", Text.Type},
            {"vault.created.user.user_display_name", Text.Type},
            {"vault.created.user.client_ip_address", Text.Type},
            {"vault.created.comment", Text.Type},
            {"vault.created.timestamp", DateTimeZone.Type},
            {"vault.denied.user.user_id", Number.Type},
            {"vault.denied.user.user_name", Text.Type},
            {"vault.denied.user.domain_name", Text.Type},
            {"vault.denied.user.user_display_name", Text.Type},
            {"vault.denied.user.client_ip_address", Text.Type},
            {"vault.denied.comment", Text.Type},
            {"vault.denied.timestamp", DateTimeZone.Type},
            {"vault.revoked.user.user_id", Number.Type},
            {"vault.revoked.user.user_name", Text.Type},
            {"vault.revoked.user.domain_name", Text.Type},
            {"vault.revoked.user.user_display_name", Text.Type},
            {"vault.revoked.user.client_ip_address", Text.Type},
            {"vault.revoked.comment", Text.Type},
            {"vault.revoked.timestamp", DateTimeZone.Type},
            {"vault.closed.user.user_id", Number.Type},
            {"vault.closed.user.user_name", Text.Type},
            {"vault.closed.user.domain_name", Text.Type},
            {"vault.closed.user.user_display_name", Text.Type},
            {"vault.closed.user.client_ip_address", Text.Type},
            {"vault.closed.comment", Text.Type},
            {"vault.closed.timestamp", DateTimeZone.Type},
            {"vault.reviewed.user.user_id", Number.Type},
            {"vault.reviewed.user.user_name", Text.Type},
            {"vault.reviewed.user.domain_name", Text.Type},
            {"vault.reviewed.user.user_display_name", Text.Type},
            {"vault.reviewed.user.client_ip_address", Text.Type},
            {"vault.reviewed.comment", Text.Type},
            {"vault.reviewed.timestamp", DateTimeZone.Type},
            {"vault.approved.user.user_id", Number.Type},
            {"vault.approved.user.user_name", Text.Type},
            {"vault.approved.user.domain_name", Text.Type},
            {"vault.approved.user.user_display_name", Text.Type},
            {"vault.approved.user.client_ip_address", Text.Type},
            {"vault.approved.comment", Text.Type},
            {"vault.approved.timestamp", DateTimeZone.Type},
            {"recording.archive.date", DateTimeZone.Type},
            {"recording.archive.path", Text.Type},
            {"recording.archive.policy", Text.Type},
            {"recording.archive.server", Text.Type},
            {"recording.archived", Logical.Type},
            {"recording.auth_method", Text.Type},
            {"recording.channel_policy", Text.Type},
            {"recording.command_extracted", Logical.Type},
            {"recording.connection_policy", Text.Type},
            {"recording.connection_policy_id", Text.Type},
            {"recording.content_reference_id", Number.Type},
            {"recording.deny_reason", Text.Type},
            {"recording.index_status", Text.Type},
            {"recording.network_id", Text.Type},
            {"recording.server_local.ip", Text.Type},
            {"recording.server_local.name", Text.Type},
            {"recording.server_local.port", Number.Type},
            {"recording.session_id", Text.Type},
            {"recording.target.ip", Text.Type},
            {"recording.target.name", Text.Type},
            {"recording.target.port", Number.Type},
            {"recording.verdict", Text.Type},
            {"recording.window_title_extracted", Logical.Type},
            {"trail_download_link", Text.Type},
            {"server.address", Text.Type},
            {"server.ip", Text.Type},
            {"server.id", Text.Type},
            {"server.name", Text.Type},
            {"server.port", Number.Type},
            {"start_time", DateTimeZone.Type},
            {"verdict", Text.Type}
        }
    ),
    Sessions.Schema = [
        sessions.client = Sessions.Client,
        sessions.client_to_sessions = Sessions.ClientToSessions,
        sessions.user = Sessions.User,
        sessions.user_to_sessions = Sessions.UserToSessions,
        sessions = Sessions
    ]
in
    [
        Name = Sessions.Name,
        IdentifierColumn = Sessions.IdentifierColumn,
        SubTables = Sessions.SubTables,
        Schema = Sessions.Schema
    ]
