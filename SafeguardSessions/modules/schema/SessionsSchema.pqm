let
    // Import
    CreateSchema = Extension.ImportFunction("CreateSchema", "SchemaUtils.pqm"),
    //
    // Schema definiton
    Sessions.Analytics.Score.Details.Command = CreateSchema(
        {{"sessions.analytics.score.details.command_id", type number}, {"score", type number}}
    ),
    Sessions.Analytics.Score.Details.Fis = CreateSchema(
        {{"sessions.analytics.score.details.fis_id", type number}, {"score", type number}}
    ),
    Sessions.Analytics.Score.Details.Hostlogin = CreateSchema(
        {{"sessions.analytics.score.details.hostlogin_id", type number}, {"score", type number}}
    ),
    Sessions.Analytics.Score.Details.Logintime = CreateSchema(
        {{"sessions.analytics.score.details.logintime_id", type number}, {"score", type number}}
    ),
    Sessions.Analytics.Score.Details.Keystroke = CreateSchema(
        {{"sessions.analytics.score.details.keystroke_id", type number}, {"score", type number}}
    ),
    Sessions.Analytics.Score.Details.Mouse = CreateSchema(
        {{"sessions.analytics.score.details.mouse_id", type number}, {"score", type number}}
    ),
    Sessions.Analytics.Score.Details.Windowtitle = CreateSchema(
        {{"sessions.analytics.score.details.windowtitle_id", type number}, {"score", type number}}
    ),
    Sessions.Analytics.Score.Details = CreateSchema(
        {
            {"sessions.analytics.score.details_id", type number},
            {"sessions.analytics.score.details.command_id", type number},
            {"sessions.analytics.score.details.fis_id", type number},
            {"sessions.analytics.score.details.hostlogin_id", type number},
            {"sessions.analytics.score.details.logintime_id", type number},
            {"sessions.analytics.score.details.keystroke_id", type number},
            {"sessions.analytics.score.details.mouse_id", type number},
            {"sessions.analytics.score.details.windowtitle_id", type number}
        }
    ),
    Sessions.Analytics.Score = CreateSchema(
        {
            {"sessions.analytics.score_id", type number},
            {"aggregated", type number},
            {"sessions.analytics.score.details_id", type number}
        }
    ),
    Sessions.Analytics = CreateSchema(
        {
            {"sessions.analytics_id", type number},
            {"interesing_events", type text},
            {"sessions.analytics.score_id", type number},
            {"scripted", type logical},
            {"similar_sessions", type text},
            {"bucketed_duration", type text},
            {"bucketed_duration_starting_hour", type text},
            {"tags", type text}
        }
    ),
    Sessions.Client = CreateSchema(
        {{"sessions.client_id", type number}, {"ip", type text}, {"name", type text}, {"port", type number}}
    ),
    Sessions.Log = CreateSchema(
        {
            {"sessions.log_id", type number},
            {"adapter_name", type text},
            {"auth_method", type text},
            {"syslog_time", type datetimezone}
        }
    ),
    Sessions.Vault.Created.User = CreateSchema(
        {
            {"sessions.vault.created.user_id", type number},
            {"user_id", type number},
            {"user_name", type text},
            {"domain_name", type text},
            {"user_display_name", type text},
            {"client_ip_address", type text}
        }
    ),
    Sessions.Vault.Created = CreateSchema(
        {
            {"sessions.vault.created_id", type number},
            {"sessions.vault.created.user_id", type number},
            {"comment", type text},
            {"timestamp", type datetimezone}
        }
    ),
    Sessions.Vault.Denied.User = CreateSchema(
        {
            {"sessions.vault.denied.user_id", type number},
            {"user_id", type number},
            {"user_name", type text},
            {"domain_name", type text},
            {"user_display_name", type text},
            {"client_ip_address", type text}
        }
    ),
    Sessions.Vault.Denied = CreateSchema(
        {
            {"sessions.vault.denied_id", type number},
            {"sessions.vault.denied.user_id", type number},
            {"comment", type text},
            {"timestamp", type datetimezone}
        }
    ),
    Sessions.Vault.Revoked.User = CreateSchema(
        {
            {"sessions.vault.revoked.user_id", type number},
            {"user_id", type number},
            {"user_name", type text},
            {"domain_name", type text},
            {"user_display_name", type text},
            {"client_ip_address", type text}
        }
    ),
    Sessions.Vault.Revoked = CreateSchema(
        {
            {"sessions.vault.revoked_id", type number},
            {"sessions.vault.revoked.user_id", type number},
            {"comment", type text},
            {"timestamp", type datetimezone}
        }
    ),
    Sessions.Vault.Closed.User = CreateSchema(
        {
            {"sessions.vault.closed.user_id", type number},
            {"user_id", type number},
            {"user_name", type text},
            {"domain_name", type text},
            {"user_display_name", type text},
            {"client_ip_address", type text}
        }
    ),
    Sessions.Vault.Closed = CreateSchema(
        {
            {"sessions.vault.closed_id", type number},
            {"sessions.vault.closed.user_id", type number},
            {"comment", type text},
            {"timestamp", type datetimezone}
        }
    ),
    Sessions.Vault.Reviewed.User = CreateSchema(
        {
            {"sessions.vault.reviewed.user_id", type number},
            {"user_id", type number},
            {"user_name", type text},
            {"domain_name", type text},
            {"user_display_name", type text},
            {"client_ip_address", type text}
        }
    ),
    Sessions.Vault.Reviewed = CreateSchema(
        {
            {"sessions.vault.reviewed_id", type number},
            {"sessions.vault.reviewed.user_id", type number},
            {"comment", type text},
            {"timestamp", type datetimezone}
        }
    ),
    Sessions.Vault.Approved.User = CreateSchema(
        {
            {"sessions.vault.approved.user_id", type number},
            {"user_id", type number},
            {"user_name", type text},
            {"domain_name", type text},
            {"user_display_name", type text},
            {"client_ip_address", type text}
        }
    ),
    Sessions.Vault.Approved = CreateSchema(
        {
            {"sessions.vault.approved_id", type number},
            {"sessions.vault.approved.user_id", type number},
            {"comment", type text},
            {"timestamp", type datetimezone}
        }
    ),
    Sessions.Vault = CreateSchema(
        {
            {"sessions.vault_id", type number},
            {"appliance_id", type text},
            {"appliance_name", type text},
            {"access_request_type", type text},
            {"asset_partition_id", type number},
            {"asset_partition_name", type text},
            {"broker_id", type number},
            {"broker_name", type text},
            {"account_id", type number},
            {"account_name", type text},
            {"system_id", type number},
            {"system_name", type text},
            {"ticket_number", type text},
            {"reason_name", type text},
            {"is_emergency", type logical},
            {"offline_workflow", type logical},
            {"auto_approved", type datetimezone},
            {"emergency_access_granted", type datetimezone},
            {"available", type datetimezone},
            {"checked_in", type datetimezone},
            {"expired", type datetimezone},
            {"sessions.vault.created_id", type number},
            {"sessions.vault.denied_id", type number},
            {"sessions.vault.revoked_id", type number},
            {"sessions.vault.closed_id", type number},
            {"sessions.vault.reviewed_id", type number},
            {"sessions.vault.approved_id", type number}
        }
    ),
    Sessions.Recording.Archive = CreateSchema(
        {
            {"sessions.recording.archive_id", type number},
            {"date", type datetimezone},
            {"path", type text},
            {"policy", type text},
            {"server", type text}
        }
    ),
    Sessions.Recording.Server_local = CreateSchema(
        {
            {"sessions.recording.server_local_id", type number},
            {"ip", type text},
            {"name", type text},
            {"port", type number}
        }
    ),
    Sessions.Recording.Target = CreateSchema(
        {
            {"sessions.recording.target_id", type number},
            {"ip", type text},
            {"name", type text},
            {"port", type number}
        }
    ),
    Sessions.Recording = CreateSchema(
        {
            {"sessions.recording_id", type number},
            {"sessions.recording.archive_id", type number},
            {"archived", type logical},
            {"auth_method", type text},
            {"channel_policy", type text},
            {"command_extracted", type logical},
            {"connection_policy", type text},
            {"connection_policy_id", type text},
            {"content_reference_id", type number},
            {"deny_reason", type text},
            {"index_status", type text},
            {"network_id", type text},
            {"sessions.recording.server_local_id", type number},
            {"session_id", type text},
            {"sessions.recording.target_id", type number},
            {"verdict", type text},
            {"window_title_extracted", type logical}
        }
    ),
    Sessions.Server = CreateSchema(
        {
            {"sessions.server_id", type number},
            {"address", type text},
            {"ip", type text},
            {"id", type text},
            {"name", type text},
            {"port", type number}
        }
    ),
    Sessions.User = CreateSchema(
        {
            {"sessions.user_id", type number},
            {"gateway_username", type text},
            {"gateway_username_domain", type text},
            {"id", type text},
            {"name", type text},
            {"name_domain", type text},
            {"server_username", type text},
            {"server_username_domain", type text}
        }
    ),
    Sessions = CreateSchema(
        {
            {"sessions_id", type number},
            {"active", type logical},
            {"sessions.analytics_id", type number},
            {"sessions.client_id", type number},
            {"creation_time", type datetimezone},
            {"duration", type number},
            {"end_time", type datetimezone},
            {"sessions.log_id", type number},
            {"node_id", type text},
            {"origin", type text},
            {"protocol", type text},
            {"sessions.vault_id", type number},
            {"sessions.recording_id", type number},
            {"trail_download_link", type text},
            {"sessions.server_id", type number},
            {"start_time", type datetimezone},
            {"sessions.user_id", type number},
            {"verdict", type text}
        }
    ),
    Sessions.Schema = [
        sessions.analytics.score.details.command = Sessions.Analytics.Score.Details.Command,
        sessions.analytics.score.details.fis = Sessions.Analytics.Score.Details.Fis,
        sessions.analytics.score.details.hostlogin = Sessions.Analytics.Score.Details.Hostlogin,
        sessions.analytics.score.details.logintime = Sessions.Analytics.Score.Details.Logintime,
        sessions.analytics.score.details.keystroke = Sessions.Analytics.Score.Details.Keystroke,
        sessions.analytics.score.details.mouse = Sessions.Analytics.Score.Details.Mouse,
        sessions.analytics.score.details.windowtitle = Sessions.Analytics.Score.Details.Windowtitle,
        sessions.analytics.score.details = Sessions.Analytics.Score.Details,
        sessions.analytics.score = Sessions.Analytics.Score,
        sessions.analytics = Sessions.Analytics,
        sessions.client = Sessions.Client,
        sessions.log = Sessions.Log,
        sessions.vault.created.user = Sessions.Vault.Created.User,
        sessions.vault.created = Sessions.Vault.Created,
        sessions.vault.denied.user = Sessions.Vault.Denied.User,
        sessions.vault.denied = Sessions.Vault.Denied,
        sessions.vault.revoked.user = Sessions.Vault.Revoked.User,
        sessions.vault.revoked = Sessions.Vault.Revoked,
        sessions.vault.closed.user = Sessions.Vault.Closed.User,
        sessions.vault.closed = Sessions.Vault.Closed,
        sessions.vault.reviewed.user = Sessions.Vault.Reviewed.User,
        sessions.vault.reviewed = Sessions.Vault.Reviewed,
        sessions.vault.approved.user = Sessions.Vault.Approved.User,
        sessions.vault.approved = Sessions.Vault.Approved,
        sessions.vault = Sessions.Vault,
        sessions.recording.archive = Sessions.Recording.Archive,
        sessions.recording.server_local = Sessions.Recording.Server_local,
        sessions.recording.target = Sessions.Recording.Target,
        sessions.recording = Sessions.Recording,
        sessions.server = Sessions.Server,
        sessions.user = Sessions.User,
        sessions = Sessions
    ]
in
    [
        Schema = Sessions.Schema
    ]
