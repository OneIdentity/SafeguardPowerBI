let
    SchemaUtils.CreateSchema = Extension.ImportFunction("CreateSchema", "SchemaUtils.pqm"),
    Sessions.Schema = SchemaUtils.CreateSchema(
        {
            {"active", type logical},
            // Analytics
            {"analytics.interesting_events", type text},
            {"analytics.score.aggregated", type number},
            {"analytics.score.details.command.score", type number},
            {"analytics.score.details.fis.score", type number},
            {"analytics.score.details.hostlogin.score", type number},
            {"analytics.score.details.logintime.score", type number},
            {"analytics.score.details.keystroke.score", type number},
            {"analytics.score.details.mouse.score", type number},
            {"analytics.score.details.windowtitle.score", type number},
            {"analytics.scripted", type logical},
            {"analytics.similar_sessions", type text},
            {"analytics.bucketed_duration", type text},
            {"analytics.bucketed_starting_hour", type text},
            {"analytics.tags", type text},
            // Client
            {"client.ip", type text},
            {"client.name", type text},
            {"client.port", type text},
            {"creation_time", type datetimezone},
            {"duration", type number},
            {"end_time", type datetimezone},
            // Log
            {"log.adapter_name", type text},
            {"log.auth_method", type text},
            {"log.syslog_time", type text},
            {"node_id", type text},
            {"origin", type text},
            {"protocol", type text},
            // Recording
            {"recording.archive.date", type datetimezone},
            {"recording.archive.path", type text},
            {"recording.archive.policy", type text},
            {"recording.archive.server", type text},
            {"recording.archived", type logical},
            {"trail_download_link", type text},
            {"recording.auth_method", type text},
            {"recording.channel_policy", type text},
            {"recording.command_extracted", type text},
            {"recording.connection_policy", type text},
            {"recording.connection_policy_id", type text},
            {"recording.content_reference_id", type number},
            {"recording.deny_reason", type text},
            {"recording.index_status", type text},
            {"recording.network_id", type text},
            {"recording.server_local.ip", type text},
            {"recording.server_local.name", type text},
            {"recording.server_local.port", type text},
            {"recording.session_id", type text},
            {"recording.target.ip", type text},
            {"recording.target.name", type text},
            {"recording.target.port", type text},
            {"recording.verdict", type text},
            {"recording.window_title_extracted", type logical},
            // Server
            {"server.address", type text},
            {"server.ip", type text},
            {"server.id", type text},
            {"server.name", type text},
            {"server.port", type text},
            {"start_time", type datetimezone},
            // User
            {"user.gateway_username", type text},
            {"user.gateway_username_domain", type text},
            {"user.id", type text},
            {"user.name", type text},
            {"user.name_domain", type text},
            {"user.server_username", type text},
            {"user.server_username_domain", type text},
            {"verdict", type text}
        }
    )
in
    [
        Schema = Sessions.Schema
    ]
