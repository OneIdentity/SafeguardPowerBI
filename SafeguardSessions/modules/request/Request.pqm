let
    IsMocked = Extension.ImportFunction("IsMocked", "Utils.pqm"),
    InfoLog = Extension.ImportFunction("InfoLog", "Logger.pqm"),
    RequestErrors = Extension.ImportModule("RequestErrors.pqm"),
    ErrorCodes = Extension.ImportFunction("ErrorCodes", "RequestErrors.pqm"),
    ValidateByStatusCode = Extension.ImportFunction("ValidateByStatusCode", "ResponseHandler.pqm"),
    Request.GetAuthParameters = (encodedCredentails as text) as record =>
        let
            parameters = [
                Query = [return = "/api/authentication"],
                Headers = [
                    #"Authorization" = Text.Combine({"Basic ", encodedCredentails}),
                    #"Accept" = "*/*",
                    #"Connection" = "keep-alive",
                    #"Cache-Control" = "no-cache, no-store, must-revalidate"
                ],
                IsRetry = true
            ]
        in
            parameters,
    Request.GetDefaultParameters = (sessionId as text) as record =>
        let
            parameters = [
                Headers = [
                    #"Accept" = "application/json",
                    #"Connection" = "keep-alive",
                    #"Cookie" = sessionId
                ],
                IsRetry = true
            ]
        in
            parameters,
    Request.Generate = (url as text, parameters as record, optional mocks as nullable record) as record =>
        let
            loggedParameters =
                if Record.HasFields(parameters, "Headers") then
                    Record.RemoveFields(parameters, "Headers")
                else
                    parameters,
            log = InfoLog("Request sent to SPS", [Url = url, Parameters = loggedParameters]),
            response =
                if IsMocked(mocks, "Response") then
                    mocks[Response]
                else
                    Web.Contents(log[Url], parameters & [ManualStatusHandling = ErrorCodes]),
            json = Json.Document(response),
            extendedMeta = Value.Metadata(response) & [RequestUrl = url],
            responseWithMeta = Value.ReplaceMetadata(json, extendedMeta)
        in
            ValidateByStatusCode(responseWithMeta),
    Request.GetHeader = (requestMetaData as record, headerName as text) as text =>
        Record.Field(requestMetaData[Headers], headerName)
in
    [
        GetAuthParameters = Request.GetAuthParameters,
        GetDefaultParameters = Request.GetDefaultParameters,
        Generate = Request.Generate,
        GetHeader = Request.GetHeader
    ]
