let
    ErrorLog = Extension.ImportFunction("ErrorLog", "Logger.pqm"),
    Schema.Sessions = Extension.ImportFunction("Sessions", "Schema.pqm"),
    Utils.IsMocked = (mocks as nullable record, field as text) as logical =>
        mocks <> null and Record.HasFields(mocks, field),
    Utils.FetchInfo = (
        status as text, message as text, start as nullable datetimezone, count as number, failed as logical, url as text
    ) as table =>
        Table.FromRecords(
            {[
                Start = start,
                Url = url,
                Status = status,
                Count = count,
                Message = message,
                Failed = failed
            ]}
        ),
    Utils.SPSResult = (session_data as anynonnull, additional_info as table) =>
        [SessionData = session_data, FetchInfo = additional_info],
    Utils.SuccessStatus = "Success",
    Utils.ErrorStatus = "Error",
    Utils.NotAvailableStatus = "N/A",
    Utils.BuildSPSResult = (response as record, start_time as datetimezone, mocks as nullable record) =>
        let
            spsresult =
                if response[HasError] then
                    ErrorLog(
                        "Error response of the http request",
                        Utils.SPSResult(
                            response[Error],
                            Utils.FetchInfo(
                                Utils.ErrorStatus,
                                response[Error][Message],
                                start_time,
                                0,
                                true,
                                response[Error][Detail][RequestUrl]? ?? Utils.NotAvailableStatus
                            )
                        )
                    )
                else
                    [
                        sessions = response[Value],
                        rowCount = Table.RowCount(sessions{[Name = Schema.Sessions]}[Data]),
                        result = Utils.SPSResult(
                            response[Value],
                            Utils.FetchInfo(
                                Utils.SuccessStatus,
                                "Data fetch succeeded",
                                start_time,
                                rowCount,
                                false,
                                Value.Metadata(sessions)[RequestUrl]
                            )
                        )
                    ][result]
        in
            spsresult
in
    [
        IsMocked = Utils.IsMocked,
        FetchInfo = Utils.FetchInfo,
        SuccessStatus = Utils.SuccessStatus,
        ErrorStatus = Utils.ErrorStatus,
        NotAvailableStatus = Utils.NotAvailableStatus,
        SPSResult = Utils.SPSResult,
        BuildSPSResult = Utils.BuildSPSResult
    ]
