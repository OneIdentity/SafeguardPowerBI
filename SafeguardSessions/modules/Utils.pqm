let
    SuccessStatus = Extension.ImportFunction("SuccessStatus", "Constants.pqm"),
    ErrorStatus = Extension.ImportFunction("ErrorStatus", "Constants.pqm"),
    NotAvailableStatus = Extension.ImportFunction("NotAvailableStatus", "Constants.pqm"),
    ErrorLog = Extension.ImportFunction("ErrorLog", "Logger.pqm"),
    InfoLog = Extension.ImportFunction("InfoLog", "Logger.pqm"),
    Utils.IsMocked = (mocks as nullable record, field as text) as logical =>
        mocks <> null and Record.HasFields(mocks, field),
    Utils.PaddedTable.FromRecords = (records as list) =>
        let
            fieldNames = List.Distinct(Record.FieldNames(Record.Combine(records))),
            paddedRecords = List.Transform(records, each Record.SelectFields(_, fieldNames, MissingField.UseNull)),
            asTable = Table.FromRecords(paddedRecords)
        in
            asTable,
    Utils.FetchInfo = (
        status as text,
        message as text,
        start as nullable datetimezone,
        expectedCount as number,
        failed as text,
        url as text
    ) as table =>
        Table.FromRecords(
            {
                [
                    Start = start,
                    Url = url,
                    ConnectorVersion = Extension.LoadString("ReleaseVersion"),
                    Status = status,
                    ExpectedCount = expectedCount,
                    Message = message,
                    Failed = failed
                ]
            }
        ),
    Utils.SPSResult = (session_data as anynonnull, additional_info as table) as table =>
        let
            source = #table(
                {"Name", "Data", "ItemKind", "ItemName", "IsLeaf"},
                {
                    {"Sessions", session_data, "Table", "Table", true},
                    {"Info", additional_info, "Table", "Table", true}
                }
            ),
            tableType = Value.Type(source),
            newTableType = Type.AddTableKey(tableType, {"Name"}, true) meta [
                NavigationTable.NameColumn = "Name",
                NavigationTable.DataColumn = "Data",
                NavigationTable.ItemKindColumn = "ItemKind",
                Preview.DelayColumn = "ItemName",
                NavigationTable.IsLeafColumn = "IsLeaf"
            ],
            navigationTable = Value.ReplaceType(source, newTableType)
        in
            navigationTable,
    Utils.BuildSPSResult = (sessionsData as record, start_time as datetimezone, expectedSessionsCount as record) =>
        let
            spsresult =
                Utils.SPSResult(
                    if sessionsData[HasError] then sessionsData[Error] else sessionsData[Value],
                    Utils.FetchInfo(
                        "This field will be removed.",
                        "This field will be removed.",
                        start_time,
                        if expectedSessionsCount[HasError] then expectedSessionsCount[Error] else expectedSessionsCount[Value],
                        "This field will be removed.",
                        "This field will be removed."
                    )
                )
        in
            spsresult
in
    [
        IsMocked = Utils.IsMocked,
        PaddedTable.FromRecords = Utils.PaddedTable.FromRecords,
        FetchInfo = Utils.FetchInfo,
        SPSResult = Utils.SPSResult,
        BuildSPSResult = Utils.BuildSPSResult
    ]
