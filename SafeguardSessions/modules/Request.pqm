let
    Request.GetAuthParameters = (encodedCredentails as text) as record =>
        let
            parameters = [
                RelativePath = "authentication",
                Query = [return = "/api/authentication"],
                Headers = [
                    #"Authorization" = Text.Combine({"Basic ", encodedCredentails}),
                    #"Accept" = "*/*",
                    #"Connection" = "keep-alive",
                    #"Cache-Control" = "no-cache, no-store, must-revalidate"
                ]
            ]
        in
            parameters,
    Request.GetDefaultParameters = (path as text, sessionId as text) as record =>
        let
            parameters = [
                RelativePath = path,
                Headers = [
                    #"Accept" = "application/json",
                    #"Connection" = "keep-alive",
                    #"Cookie" = sessionId
                ],
                IsRetry = true
            ]
        in
            parameters,
    Request.Generate = (url as text, parameters as record, optional mocks as record) as record =>
        let
            response =
                if mocks <> null and Record.HasFields(mocks, "Response") then
                    mocks[Response]
                else
                    Web.Contents(url, parameters),
            _meta = Value.Metadata(response),
            _table = Table.FromRecords({Json.Document((response))})
        in
            [
                Data = _table,
                RequestMetaData = _meta
            ],
    Request.GetHeader = (requestMetaData as record, headerName as text) as text =>
        Record.Field(requestMetaData[Headers], headerName)
in
    [
        GetAuthParameters = Request.GetAuthParameters,
        GetDefaultParameters = Request.GetDefaultParameters,
        Generate = Request.Generate,
        GetHeader = Request.GetHeader
    ]
