let
    Utils.DelimiterChar = ".",
    Utils.DelimiterCount = 0,
    Utils.IsMocked = (mocks as nullable record, field as text) as logical =>
        /*
            Utils.GetOption is the successor of Utils.IsMocked but the latter
            is still kept in the code base as it is still in use in the
            SafeguardPassword project.
        */
        mocks <> null and Record.HasFields(mocks, field),
    Utils.PaddedTable.FromRecords = (records as list) =>
        let
            fieldNames = List.Distinct(Record.FieldNames(Record.Combine(records))),
            paddedRecords = List.Transform(records, each Record.SelectFields(_, fieldNames, MissingField.UseNull)),
            asTable = Table.FromRecords(paddedRecords)
        in
            asTable,
    Utils.Record.Update = (r as record, field as text, value as any) =>
        Record.AddField(Record.RemoveFields(r, field, MissingField.Ignore), field, value),
    Utils.GetOption = (options as nullable record, valuePath as text, optional defaultValue as any) as any =>
        let
            optionName = Text.BeforeDelimiter(valuePath, Utils.DelimiterChar, Utils.DelimiterCount),
            newPath = Text.AfterDelimiter(valuePath, Utils.DelimiterChar, Utils.DelimiterCount),
            optionValue = Record.FieldOrDefault(options, optionName, defaultValue)
        in
            if Text.Contains(valuePath, Utils.DelimiterChar) then
                @Utils.GetOption(optionValue, newPath)
            else
                optionValue,
    Utils.SetOption = (options as nullable record, valuePath as text, value as any) as record =>
        let
            newOptions =
                if value is null then
                    options
                else
                    let
                        optionName = Text.BeforeDelimiter(valuePath, Utils.DelimiterChar, Utils.DelimiterCount),
                        newPath = Text.AfterDelimiter(valuePath, Utils.DelimiterChar, Utils.DelimiterCount),
                        optionValue = Record.FieldOrDefault(options, optionName, []),
                        newValue =
                            if Text.Contains(valuePath, Utils.DelimiterChar) then
                                @Utils.SetOption(optionValue, newPath, value)
                            else
                                value
                    in
                        Utils.Record.Update(options, optionName, newValue)
        in
            newOptions
in
    [
        IsMocked = Utils.IsMocked,
        PaddedTable.FromRecords = Utils.PaddedTable.FromRecords,
        GetOption = Utils.GetOption,
        SetOption = Utils.SetOption
    ]
